import vitiate

vitiate.rand_init(repeatable=False)
structure = vitiate.v_size_t([3, 4, 5])
input1 = vitiate.v_float([2, 1])
set_ins = vitiate.vv_float([input1])
out1 = vitiate.v_float([0, 0, 0, 0, 0])
set_outs = vitiate.vv_float([out1])
net = vitiate.net_float(n_ins=2, n_p_l=structure, derivate=True)
net.init_gradient(set_ins, set_outs)
print("gradient errors are", net.launch_gradient(iterations=10), "\n")
print("gradient took", net.get_gradient_performance(), "us\n")
test_input1 = vitiate.v_float([2, 1])
print("forward output is", net.launch_forward(test_input1), "\n")
print("forward took", net.get_forward_performance(), "us\n")
file_manager = vitiate.net_float.file_manager()
file_manager.write_net_to_file("petete", net)

file_manager.load_net("petete")
file_manager.load_sets("peteton")
net2 = vitiate.net_float(file_manager, derivate=True, random=False)
net2.init_gradient(file_manager)
print("gradient errors are", net2.launch_gradient(iterations=65), "\n")
print("gradient took", net2.get_gradient_performance(), "us\n")
test_input2 = vitiate.v_float([2, 1])
print("forward output is", net2.launch_forward(test_input2), "\n")
print("forward took", net2.get_forward_performance(), "us\n")
